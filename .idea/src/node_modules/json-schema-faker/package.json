{
  "_args": [
    [
      {
        "raw": "json-schema-faker@0.3.6",
        "scope": null,
        "escapedName": "json-schema-faker",
        "name": "json-schema-faker",
        "rawSpec": "0.3.6",
        "spec": "0.3.6",
        "type": "version"
      },
      "/home/hartesh/Tetris/.idea/src"
    ]
  ],
  "_from": "json-schema-faker@0.3.6",
  "_id": "json-schema-faker@0.3.6",
  "_inCache": true,
  "_location": "/json-schema-faker",
  "_nodeVersion": "4.4.3",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/json-schema-faker-0.3.6.tgz_1470088898646_0.07674712873995304"
  },
  "_npmUser": {
    "name": "ducin",
    "email": "tomasz.ducin@gmail.com"
  },
  "_npmVersion": "2.15.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "json-schema-faker@0.3.6",
    "scope": null,
    "escapedName": "json-schema-faker",
    "name": "json-schema-faker",
    "rawSpec": "0.3.6",
    "spec": "0.3.6",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/json-schema-faker/-/json-schema-faker-0.3.6.tgz",
  "_shasum": "caf158554eb03c00b8d741755576b7bf7e5ea181",
  "_shrinkwrap": null,
  "_spec": "json-schema-faker@0.3.6",
  "_where": "/home/hartesh/Tetris/.idea/src",
  "bugs": {
    "url": "https://github.com/json-schema-faker/json-schema-faker/issues"
  },
  "contributors": [
    {
      "name": "Alvaro Cabrera",
      "email": "pateketrueke@gmail.com"
    },
    {
      "name": "Tomasz Ducin",
      "email": "tomasz@ducin.it",
      "url": "http://ducin.it"
    }
  ],
  "dependencies": {
    "chance": "^1.0.4",
    "deref": "^0.6.4",
    "faker": "~3.1.0",
    "randexp": "~0.4.3"
  },
  "description": "JSON-Schema + fake data generators",
  "devDependencies": {
    "browserify": "^13.1.0",
    "clone": "^1.0.2",
    "codecov": "^1.0.1",
    "eslint": "^3.2.2",
    "fs-extra": "^0.30.0",
    "glob": "^7.0.5",
    "istanbul": "^0.4.4",
    "jasmine-node": "^2.0.0",
    "jayschema": "^0.3.1",
    "lodash.template": "^4.3.0",
    "semver": "^5.3.0",
    "tslint": "^3.14.0",
    "tv4": "^1.2.7",
    "typedoc": "^0.4.4",
    "typescript": "^1.8.10",
    "uglify-js": "^2.7.0",
    "z-schema": "^3.17.0"
  },
  "directories": {},
  "dist": {
    "shasum": "caf158554eb03c00b8d741755576b7bf7e5ea181",
    "tarball": "https://registry.npmjs.org/json-schema-faker/-/json-schema-faker-0.3.6.tgz"
  },
  "gitHead": "81f3ab9efe98cb4c15960ceee6ba9f86af7c7236",
  "homepage": "http://json-schema-faker.js.org",
  "keywords": [
    "json",
    "jsonschema",
    "fake",
    "mocks"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "pateketrueke",
      "email": "pateketrueke@gmail.com"
    },
    {
      "name": "ducin",
      "email": "tomasz.ducin@gmail.com"
    }
  ],
  "name": "json-schema-faker",
  "optionalDependencies": {},
  "readme": "[![JSON Schema Faker logo](logo/typescript-logo.png)](https://github.com/json-schema-faker/json-schema-faker)\n\n[![Build Status](https://travis-ci.org/json-schema-faker/json-schema-faker.svg?branch=master)](https://travis-ci.org/json-schema-faker/json-schema-faker)\n[![NPM version](https://badge.fury.io/js/json-schema-faker.svg)](http://badge.fury.io/js/json-schema-faker)\n[![Bower version](https://badge.fury.io/bo/json-schema-faker.svg)](https://badge.fury.io/bo/json-schema-faker)\n[![Coverage Status](https://codecov.io/github/json-schema-faker/json-schema-faker/coverage.svg?branch=master)](https://codecov.io/github/json-schema-faker/json-schema-faker?branch=master)\n\n[![Dependency Status](https://david-dm.org/json-schema-faker/json-schema-faker/status.svg)](https://david-dm.org/json-schema-faker/json-schema-faker)\n[![devDependency Status](https://david-dm.org/json-schema-faker/json-schema-faker/dev-status.svg)](https://david-dm.org/json-schema-faker/json-schema-faker#info=devDependencies)\n\n[![Inline docs](http://inch-ci.org/github/json-schema-faker/json-schema-faker.svg?branch=master)](http://inch-ci.org/github/json-schema-faker/json-schema-faker)\n[![Typedoc](https://img.shields.io/badge/typedoc-provided-blue.svg)](http://json-schema-faker.github.io/json-schema-faker/)\n\nUse [JSON Schema](http://json-schema.org/) along with fake generators to provide consistent and meaningful fake data for your system.\n\nWe are looking for **contributors**! If you wanna help us make `jsf` more awesome, simply write us so!\n\n## NEW in JSON Schema Faker: store schemas online!\n\n[![save JSON Schema online](logo/other/save-button-small.png)](http://json-schema-faker.js.org/)\n\n\n\n# Table of contents\n\n- Basics\n  - [JSON-schema-faker](#fake-your-schemas)\n  - [Online demo](#online-demo)\n  - [Install](#install)\n    - [npm](#npm)\n    - [bower](#bower)\n    - [cdnjs](#cdnjs)\n  - [Overview](#overview)\n  - [Example usage](#example-usage)\n    - [More examples](#more-examples)\n    - [Gist demos](#gist-demos)\n  - [Automation](#automation)\n    - [Angular-jsf (AngularJS plugin)](#angular-jsf)\n    - [Grunt plugin](#grunt-plugin)\n- Advanced\n  - [JSON Schema specification support](#json-schema-specification-support)\n  - [Supported keywords](#supported-keywords)\n  - [Using references](#using-references)\n  - [Faking values](#faking-values)\n    - [Advanced usage of faker.js and Chance.js](#user-content-advanced-usage-of-fakerjs-and-chancejs)\n  - [Custom formats](#custom-formats)\n  - [Custom options](#custom-options)\n  - [Extending dependencies](#extending-dependencies)\n  - [Inferred Types](#inferred-types)\n  - [Swagger extensions](#swagger-extensions)\n  - [Bundling](#bundling)\n- Misc\n  - [Contribution](#contribution)\n    - [Technical Documentation](#technical-documentation)\n  - [Resources](#resources)\n  - [Motivation](#motivation)\n\n## Online demo\n\nSee [online demo](http://json-schema-faker.js.org/). You can save your schemas online and share the link with your collaborators.\n\n## Install\n\n`jsf` is installable through 3 different channels:\n\n### npm\n\nInstall `json-schema-faker` with npm:\n\n    npm install json-schema-faker --save\n\n### bower\n\nInstall `json-schema-faker` with bower:\n\n    bower install json-schema-faker --save\n\n### cdnjs\n\nJSON-Schema-faker is also available at [cdnjs.com](https://www.cdnjs.com/libraries/json-schema-faker). This means you can just include the script file into your HTML:\n\n    # remember to update the version number!\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/json-schema-faker/0.3.4/json-schema-faker.min.js\"></script>\n\nIt will be fetched from the [Content Delivery Network](https://en.wikipedia.org/wiki/Content_delivery_network) without installing any node.js package.\n\nYou can see [an example JS fiddle based on `jsf` loaded from cdnjs](https://jsfiddle.net/ftzhnmzq/4/).\n\n## Overview\n\nJSON-Schema-faker (or `jsf` for short) combines two things:\n\n * The [JSON-schema specification](http://json-schema.org/), that defines what is the allowed content of a JSON document\n * Fake data generators, that are used to generate basic or complex data, conforming to the schema. Following libraries come bundled with jsf:\n   * [faker.js](https://github.com/Marak/faker.js)\n   * [chance.js](https://github.com/victorquinn/chancejs)\n   * [randexp](https://github.com/fent/randexp.js)\n\n## Example usage\n\n```javascript\nvar jsf = require('json-schema-faker');\n\nvar schema = {\n  type: 'object',\n  properties: {\n    user: {\n      type: 'object',\n      properties: {\n        id: {\n          $ref: '#/definitions/positiveInt'\n        },\n        name: {\n          type: 'string',\n          faker: 'name.findName'\n        },\n        email: {\n          type: 'string',\n          format: 'email',\n          faker: 'internet.email'\n        }\n      },\n      required: ['id', 'name', 'email']\n    }\n  },\n  required: ['user'],\n  definitions: {\n    positiveInt: {\n      type: 'integer',\n      minimum: 0,\n      exclusiveMinimum: true\n    }\n  }\n};\n\nvar sample = jsf(schema);\n\nconsole.log(sample);\n// \"[object Object]\"\n\nconsole.log(sample.user.name);\n// \"John Doe\"\n```\n([demo Â»](http://json-schema-faker.js.org/#gist/927cf888cbc250a2b8e60eb5834cdfbd))\n\n`jsf.version` attribute is available to check which version you're using:\n\n```javascript\nvar jsf = require('json-schema-faker');\nconsole.log(jsf.version);\n// \"0.3.6\"\n```\n\n### More examples\n\n * [json-schema.org/example1.html](http://json-schema.org/example1.html):\n   [warehouse location](http://json-schema-faker.js.org/#gist/bb4774bf26167360e7c5cf2a29db3e56),\n   [Product from Acme catalog](http://json-schema-faker.js.org/#gist/c7a398c537cf7befce0df67fe7feeea8)\n * [json-schema.org/example2.html](http://json-schema.org/example2.html):\n   [_diskDevice_ storage type](http://json-schema-faker.js.org/#gist/0c0d676023ea505c97eef9af0b4d95da),\n   [_diskUUID_ storage type](http://json-schema-faker.js.org/#gist/0ac23aa547acfdb2897a7afec3042534),\n   [_nfs_ storage type](http://json-schema-faker.js.org/#gist/473ac2bc364b2610f7fc703e59cfe1c9),\n   [_tmpfs_ storage type](http://json-schema-faker.js.org/#gist/de1c5f18f0d231557ce25e44f581cadf)\n\n### Gist demos\n\nClone these gists and execute them locally (each gist has its own readme with instructions):\n\n * [jsf console](https://gist.github.com/ducin/9f2364ccde2e9248fbcd) - minimal example of jsf working directly under command line\n * [jsf grunt](https://gist.github.com/ducin/87e0b55bddd1801d3d99) - example of jsf working under grunt.js\n\n## Automation\n\n### angular-jsf\n\nUse [`angular-jsf`](https://github.com/json-schema-faker/angular-jsf) module (installable via `npm` and `bower`) to get **`jsf` working in your angular app out of the box**! And check out [angular-jsf demo](http://angular-jsf.js.org/).\n\n### Grunt plugin\n\nUse [grunt-jsonschema-faker](https://github.com/json-schema-faker/grunt-jsonschema-faker)\nto automate running `json-schema-faker` against your JSON schemas.\n\n## JSON Schema specification support\n\nCurrently `jsf` supports the JSON-Schema specification **draft-04** only.\n\nIf you want to use **draft-03**, you may find useful information [here](https://github.com/json-schema-faker/json-schema-faker/issues/66).\n\n## Supported keywords\n\nBelow is the list of supported keywords:\n\n- `$ref` &mdash; Resolve internal references only, and/or external if provided.\n- `required` &mdash; All required properties are guaranteed, if not can be omitted.\n- `pattern` &mdash; Generate samples based on RegExp values.\n- `format` &mdash; Core formats only:\n  [`date-time`](http://json-schema.org/latest/json-schema-validation.html#anchor108),\n  [`email`](http://json-schema.org/latest/json-schema-validation.html#anchor111),\n  [`hostname`](http://json-schema.org/latest/json-schema-validation.html#anchor114),\n  [`ipv4`](http://json-schema.org/latest/json-schema-validation.html#anchor117),\n  [`ipv6`](http://json-schema.org/latest/json-schema-validation.html#anchor120)\n  and [`uri`](http://json-schema.org/latest/json-schema-validation.html#anchor123)\n    -- [demo Â»](http://json-schema-faker.js.org/#gist/f58db80cbf52c12c623166090240d964)\n- `enum` &mdash; Returns any of these enumerated values.\n- `minLength`, `maxLength` &mdash; Applies length constraints to string values.\n- `minimum`, `maximum` &mdash; Applies constraints to numeric values.\n- `exclusiveMinimum`, `exclusiveMaximum` &mdash; Adds exclusivity for numeric values.\n- `multipleOf` &mdash; Multiply constraints for numeric values.\n- `items` &mdash; Support for subschema and fixed item values.\n- `minItems`, `maxItems` &mdash; Adds length constraints for array items.\n- `uniqueItems` &mdash; Applies uniqueness constraints for array items.\n- `additionalItems` &mdash; Partially supported (?)\n- `allOf`, `oneOf`, `anyOf` &mdash; Subschema combinators.\n- `properties` &mdash; Object properties to be generated.\n- `minProperties`, `maxProperties` &mdash; Adds length constraints for object properties.\n- `patternProperties` &mdash; RegExp-based object properties.\n- `additionalProperties` &mdash; Partially supported (?)\n- `dependencies` &mdash; Not supported yet (?)\n- `not` &mdash; Not supported yet (?)\n\n## Using references\n\nInline references are fully supported (json-pointers) but external can't be resolved by `jsf`.\n\nIn order to achieve that you can use [refaker](https://github.com/json-schema-faker/refaker) and then use the resolved schemas:\n\n```javascript\nvar schema = {\n  type: 'object',\n  properties: {\n    someValue: {\n      $ref: 'otherSchema'\n    }\n  }\n};\n\nvar refs = [\n  {\n    id: 'otherSchema',\n    type: 'string'\n  }\n];\n\nvar sample = jsf(schema, refs);\n\nconsole.log(sample.someValue);\n// \"voluptatem\"\n```\n\n## Faking values\n\n`jsf` has built-in generators for core-formats, [Faker.js](http://marak.com/faker.js/) and [Chance.js](http://chancejs.com/) are also supported.\n\nYou can use **faker** or **chance** properties but they are optional:\n\n```json\n{\n  \"type\": \"string\",\n  \"faker\": \"internet.email\"\n}\n```\n([demo Â»](http://json-schema-faker.js.org/#gist/89659ebf28be89d3f860c3f80cbffe4b))\n\nThe above schema will invoke [`faker.internet.email()`](https://github.com/Marak/faker.js/blob/1f47f09e25ad43db41ea4187c3cd3f7e113d4cb4/lib/internet.js#L32).\n\nNote that both generators has higher precedence than **format**.\n\nYou can also use standard JSON Schema keywords, e.g. `pattern`:\n\n```json\n{\n  \"type\": \"string\",\n  \"pattern\": \"yes|no|maybe|i don't know\"\n}\n```\n([demo Â»](http://json-schema-faker.js.org/#gist/8ee282679da5a31cd7edc4cf35f37081))\n\n### Advanced usage of faker.js and Chance.js\n\nIn following inline code examples the `faker` and `chance` variables are assumed to be created with, respectively:\n\n```javascript\nvar faker = require('faker');\n\nvar Chance = require('chance'),\n  chance = new Chance();\n```\n\nAnother example of faking values is passing arguments to the generator:\n\n```json\n{\n  \"type\": \"string\",\n  \"chance\": {\n    \"email\": {\n      \"domain\": \"fake.com\"\n    }\n  }\n}\n```\n([demo Â»](http://json-schema-faker.js.org/#gist/c6ab6a0325e53fd3b38ee0293a9aeea3))\n\nwhich will invoke [`chance.email({ \"domain\": \"fake.com\" })`](https://github.com/chancejs/chancejs/blob/b4c143bf53f516dfd77a8376d0f631462458c062/chance.js#L1118).\nThis example works for single-parameter generator function.\n\nHowever, if you pass multiple arguments to the generator function, just pass them wrapped in an array.\nIn the example below we use the [`faker.finance.amount(min, max, dec, symbol)`](https://github.com/Marak/faker.js/blob/1f47f09e25ad43db41ea4187c3cd3f7e113d4cb4/lib/finance.js#L85)\ngenerator which has 4 parameters. We just wrap them with an array and it's equivalent to `faker.finance.amount(100, 10000, 2, \"$\")`:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"cash\": {\n      \"type\": \"string\",\n      \"faker\": {\n        \"finance.amount\": [100, 10000, 2, \"$\"]\n      }\n    }\n  },\n  \"required\": [\n    \"cash\"\n  ]\n}\n```\n([demo Â»](http://json-schema-faker.js.org/#gist/3a15a11d706e5b145c30f943d55c42b2))\n\nHowever, if you want to pass a single parameter that is an array itself, e.g.\n[`chance.pickone([\"banana\", \"apple\", \"orange\"])`](https://github.com/chancejs/chancejs/blob/b4c143bf53f516dfd77a8376d0f631462458c062/chance.js#L382),\njust like [described here](https://github.com/json-schema-faker/json-schema-faker/issues/171),\nthen you need to wrap it with an array once more (twice in total). The outer brackets determine that the content is gonna be a list of params injected into the generator. The inner brackets are just the value itself - the array we pass:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"food\": {\n      \"type\": \"string\",\n      \"chance\": {\n        \"pickone\": [\n          [\n            \"banana\",\n            \"apple\",\n            \"orange\"\n          ]\n        ]\n      }\n    }\n  },\n  \"required\": [\n    \"food\"\n  ]\n}\n```\n([demo Â»](http://json-schema-faker.js.org/#gist/792d626e7d92841ded5be59b8ed001eb))\n\n**BREAKING CHANGES**\n\n> Since `0.3.0` the `faker` and `chance` dependencies aren't shipped by default,\n> in order to use both generators you MUST install them with `npm install faker chance --save`.\n\n## Custom formats\n\nAdditionally, you can add custom generators for those:\n\n```javascript\njsf.format('semver', function(gen, schema) {\n  return gen.randexp('^\\\\d\\\\.\\\\d\\\\.\\\\d{1,2}$');\n});\n```\n\nNow that format can be generated:\n\n```json\n{\n  \"type\": \"string\",\n  \"format\": \"semver\"\n}\n```\n\nUsage:\n\n- **format()** &mdash; Return all registered formats (custom only)\n- **format(obj)** &mdash; Register formats by key/value &rarr; name/callback\n- **format(name)** &mdash; Returns that format generator (undefined if not exists)\n- **format(name, callback)** &mdash; Register a custom format by name/callback\n\nCallback:\n\n- **gen** (object) &mdash; Built in generators\n  - **faker** (object) &mdash; Faker.js instance\n  - **chance** (object) &mdash; Chance.js instance\n  - **randexp** (function) &mdash; Randexp generator\n- **schema** (object) &mdash; The schema for input\n\nNote that custom generators has lower precedence than core ones.\n\n## Custom Options\n\nYou may define following options for `jsf` that alter its behavior:\n\n- `failOnInvalidTypes`: boolean - don't throw exception when invalid type passed\n- `defaultInvalidTypeProduct`: - default value generated for a schema with invalid type (works only if `failOnInvalidTypes` is set to `false`)\n\nSet options just as below:\n\n```javascript\njsf.option({\n  failOnInvalidTypes: false\n});\n```\n\n## Extending dependencies\n\nYou may extend [Faker.js](http://marak.com/faker.js/):\n\n```javascript\nvar jsf = require('json-schema-faker');\n\njsf.extend('faker', function(faker){\n  faker.locale = \"de\"; // or any other language\n  faker.custom = {\n    statement: function(length) {\n      return faker.name.firstName() + \" has \" + faker.finance.amount() + \" on \" + faker.finance.account(length) + \".\";\n    }\n  };\n  return faker;\n});\n\nvar schema = {\n  \"type\": \"string\",\n  \"faker\": {\n    \"custom.statement\": [19]\n  }\n}\n\nvar sample = jsf(schema);\n```\n\nor if you want to use [faker's *individual localization packages*](https://github.com/Marak/faker.js#individual-localization-packages), simply do the following:\n\n```js\njsf.extend('faker', function() {\n  // just ignore the passed faker instance\n  var faker = require('faker/locale/de');\n  // do other stuff\n  return faker;\n});\n```\n\nYou can also extend [Chance.js](http://chancejs.com/), using built-in [chance.mixin](http://chancejs.com/#mixin) function:\n\n```javascript\nvar jsf = require('json-schema-faker');\n\njsf.extend('chance', function(chance){\n  chance.mixin({\n    'user': function() {\n      return {\n        first: chance.first(),\n        last: chance.last(),\n        email: chance.email()\n      };\n    }\n  });\n\n  return chance;\n});\n\nvar schema = {\n  \"type\": \"string\",\n  \"chance\": \"user\"\n}\n\nvar sample = jsf(schema);\n```\n\nThe first parameter of `extend` function is the generator name (`faker` or `chance`). The second one is the function that accepts the dependency library; the function alters the library and **returns it**.\n\n## Inferred Types\n\nJSON Schema does not require you to provide the `type` property for your JSON Schema documents and document fragments.\n\nBut since `jsf` uses the `type` property to create the proper fake data, we attempt to infer the type whenever it is not provided. We do this based on the JSON Schema validation properties you use.\n\n> Now this means that if you do not use any of the JSON Schema validation properties, jsf will not be able to infer the type for you and you will need to **explicitly** set your `type` manually.)\n\nBelow is the list of JSON Schema validation properties and the inferred type based on the property:\n\n**array**\n\n* `additionalItems`\n* `items`\n* `maxItems`\n* `minItems`\n* `uniqueItems`\n\n**integer** *(Number uses the same properties so if you need `number`, set your `type` explicitly)*\n\n* `exclusiveMaximum`\n* `exclusiveMinimum`\n* `maximum`\n* `minimum`\n* `multipleOf`\n\n**object**\n\n* `additionalProperties`\n* `dependencies`\n* `maxProperties`\n* `minProperties`\n* `patternProperties`\n* `properties`\n* `required`\n\n**string**\n\n* `maxLength`\n* `minLength`\n* `pattern`\n\n## Swagger extensions\n\n`jsf` supports [OpenAPI Specification *vendor extensions*](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#vendorExtensions), i.e.\n\n* `x-faker` property that stands for `faker` property ([demo Â»](http://json-schema-faker.js.org/#gist/7cdf200c27eceb6163a79fbc50813fcb))\n* `x-chance` property that stands for `chance` property ([demo Â»](http://json-schema-faker.js.org/#gist/c0084695b4ca1c4cd015ded1f5c6dc33))\n\nThanks to it, you can use valid swagger definitions for `jsf` data generation.\n\n## Bundling\n\nJSON-Schema-faker might be used in Node.js as well as in the browser. In order to execute `jsf` in a browser, you should include the distribution file from [`dist`](dist) directory. Each new version of `jsf` is bundled using [browserify](http://browserify.org/) and stored by the library maintainers. The bundle includes full versions of all dependencies.\n\nHowever, you may want to bundle a smaller package of `jsf`, because:\n* you want to reduce the bundle file size\n* you don't need all languages from faker.js\n* you wish to use chance.js only and get rid of other dependencies\n* or for any other reason...\nIn that case you may bundle the distribution yourself manually. It's easily achievable: just modify the [`lib/util/container.js`](lib/util/container.js) file and either remove o rmodify the `require` calls (they're directly used by browserify to include dependencies). Automation of this feature is expected in near future.\n\n## Contribution\n\n* [Alvaro Cabrera](https://twitter.com/pateketrueke)\n* [Tomasz Ducin](https://twitter.com/tomasz_ducin)\n* artwork by [Ajay Karat](http://www.devilsgarage.com/)\n\nWe are more than happy to welcome new contributors, our project is heavily developed, but we need more power :)\nPlease see [contribution guide](.github/CONTRIBUTING.md), you can always contact us to ask how you can help.\n\n### Technical Documentation\n\nIf you want to contribute, take a look at [the technical documentation page](docs/). You may find some important information there making it easier to start.\n\nMoreover, if you find something unclear (e.g. how does something work) or would like to suggest improving the docs, please submit an issue, we'll gladly provide more info for future contributors.\n\n## Resources\n\n* [JSON, JSON Schema & JSON-schema-faker](https://www.youtube.com/watch?v=TkqiUG3j_Xw) - WarsawJS meetup presentation recording, a step-by-step guide to JSON-related tools, including `jsf`\n\n## Motivation\n\nThere were some existing projects or services trying to achieve similar goals as `jsf`:\n\n- http://www.json-generator.com/\n- https://github.com/unindented/fake-json\n- https://github.com/jonahkagan/schematic-ipsum\n- https://www.npmjs.org/package/json-schema-mock\n- https://github.com/thaume/json-schema-processor\n- https://github.com/andreineculau/json-schema-random\n- https://github.com/murgatroid99/json-schema-random-instance\n- https://github.com/tomarad/JSON-Schema-Instantiator\n\nbut they were either incomplete, outdated, broken or non-standard. That's why `jsf` was created.\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/json-schema-faker/json-schema-faker/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/json-schema-faker/json-schema-faker.git"
  },
  "scripts": {
    "cover": "istanbul cover --root lib --x '**/spec/**' -- jasmine-node --coffee spec",
    "cover:up": "codecov --file=coverage/lcov.info --disable=gcov -e TRAVIS_NODE_VERSION",
    "dev": "jasmine-node spec/schema --coffee --verbose --autoTest --watchFolders lib",
    "dist": "node build/dist.js",
    "graphviz": "madge lib --dot > structure.gv",
    "test": "npm run test:lint && npm run test:unit && npm run test:schema",
    "test:lint": "tslint ts/**/*.ts && eslint lib",
    "test:schema": "jasmine-node spec/schema --coffee --noStackTrace --captureExceptions",
    "test:unit": "jasmine-node spec/unit --noStackTrace --captureExceptions",
    "tsc": "bash build/tsc.sh",
    "tsify": "browserify ts/index.ts -p [ tsify ] > dist/temp-bundle.js",
    "typedoc": "typedoc --out docs/html ts/ --module commonjs"
  },
  "version": "0.3.6"
}
