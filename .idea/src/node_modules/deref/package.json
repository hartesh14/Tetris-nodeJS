{
  "_args": [
    [
      {
        "raw": "deref@^0.6.4",
        "scope": null,
        "escapedName": "deref",
        "name": "deref",
        "rawSpec": "^0.6.4",
        "spec": ">=0.6.4 <0.7.0",
        "type": "range"
      },
      "/home/hartesh/Tetris/.idea/src/node_modules/json-schema-faker"
    ]
  ],
  "_from": "deref@>=0.6.4 <0.7.0",
  "_id": "deref@0.6.4",
  "_inCache": true,
  "_location": "/deref",
  "_nodeVersion": "4.4.3",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/deref-0.6.4.tgz_1462417330627_0.4299996013287455"
  },
  "_npmUser": {
    "name": "pateketrueke",
    "email": "pateketrueke@gmail.com"
  },
  "_npmVersion": "2.15.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "deref@^0.6.4",
    "scope": null,
    "escapedName": "deref",
    "name": "deref",
    "rawSpec": "^0.6.4",
    "spec": ">=0.6.4 <0.7.0",
    "type": "range"
  },
  "_requiredBy": [
    "/json-schema-faker"
  ],
  "_resolved": "https://registry.npmjs.org/deref/-/deref-0.6.4.tgz",
  "_shasum": "bd5a96d45dbed3011bb81bdf68ddf54be8e1bd4e",
  "_shrinkwrap": null,
  "_spec": "deref@^0.6.4",
  "_where": "/home/hartesh/Tetris/.idea/src/node_modules/json-schema-faker",
  "bugs": {
    "url": "https://github.com/json-schema-faker/deref/issues"
  },
  "dependencies": {
    "deep-extend": "^0.4.0"
  },
  "description": "JSON-Schema $ref resolution",
  "devDependencies": {
    "clone": "^0.1.19",
    "codecov": "^1.0.1",
    "eslint": "^2.3.0",
    "glob": "^4.5.3",
    "is-my-json-valid": "^2.13.1",
    "istanbul": "^0.4.2",
    "jasmine-node": "2.0.0-beta4",
    "jayschema": "^0.3.1",
    "tv4": "^1.2.7",
    "z-schema": "^3.15.4"
  },
  "directories": {},
  "dist": {
    "shasum": "bd5a96d45dbed3011bb81bdf68ddf54be8e1bd4e",
    "tarball": "https://registry.npmjs.org/deref/-/deref-0.6.4.tgz"
  },
  "gitHead": "5d548fe543d81f7a5505ec0e0359df33ec8996d5",
  "homepage": "https://github.com/json-schema-faker/deref#readme",
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "pateketrueke",
      "email": "pateketrueke@gmail.com"
    }
  ],
  "name": "deref",
  "optionalDependencies": {},
  "publishConfig": {
    "registry": "http://registry.npmjs.org"
  },
  "readme": "\nDo you have $ref's ?\n====================\n\n[![Build Status](https://travis-ci.org/json-schema-faker/deref.png?branch=master)](https://travis-ci.org/json-schema-faker/deref)\n[![NPM version](https://badge.fury.io/js/deref.png)](http://badge.fury.io/js/deref)\n[![Coverage Status](https://codecov.io/github/json-schema-faker/deref/coverage.svg)](https://codecov.io/github/json-schema-faker/deref)\n\nA simple way for solving `$ref` values:\n\n```javascript\nvar deref = require('deref');\n```\n\nSchema dereferencing\n--------------------\n\n```javascript\n$ = deref();\n\nvar a = {\n  id: 'a',\n  type: 'object',\n  properties: {\n    b: {\n      $ref: 'b'\n    }\n  }\n};\n\nvar b = {\n  id: 'b',\n  type: 'string'\n};\n\nvar c = {\n  id: 'c',\n  type: 'array',\n  items: {\n    $ref: 'a'\n  }\n};\n\nconsole.log($(c, [b, a]).id);\n// output: http://json-schema.org/c#\n\nconsole.log($(c, [b, a], true).items.properties.b.type);\n// output: string\n```\n\nSchema normalization\n--------------------\n\n```javascript\nvar schema = {\n  id: 'http://x.y.z/rootschema.json#',\n  schema1: {\n    id: '#foo'\n  },\n  schema2: {\n    id: 'otherschema.json',\n    nested: {\n      id: '#bar'\n    },\n    alsonested: {\n      id: 't/inner.json#a'\n    }\n  },\n  schema3: {\n    id: 'some://where.else/completely#'\n  }\n};\n\nconsole.log(deref.util.normalizeSchema(schema).schema2.nested.id);\n// output: http://x.y.z/otherschema.json#bar\n```\n\nSchema identity\n---------------\n\nSince `0.3.0` the schema `id` will always be normalized internally to `#` when it's not provided.\n\nThis way the passed schema can be self-referenced using `$ref`'s which is the expected behavior.\n\nI know the `id` keyword is not required but while `#/` is a self-reference we can assume `#` as the schema-id.\n\n`deref` use that `id` for store and find `$ref`'s, even self-references.\n\nWithout it is complex determine what to resolve. :beers:\n\nBasic usage\n===========\n\nThe resulting function of calling `deref()` can accept three arguments:\n\n- **fakeroot** (string)\n\n  Used on missing `$schema` values for resolve into fully qualified URIs.\n\n  ```javascript\n  console.log($('http://example.com', { id: '#foo' }).id);\n  // output: http://example.com#foo\n  ```\n\n  If missing will use `http://json-schema.org/schema`.\n\n- **schema** (object)\n\n  The JSON-Schema object for dereferencing.\n\n- **refs** (array)\n\n  Any additional schemas used while dereferencing.\n\n  Since `0.2.4` passing an object is not longer supported.\n\n- **ex** (boolean)\n\n  Whether do full dereferencing or not, `false` by default.\n\n  Since `0.6.0` all inner references are not dereferenced by default.\n\n  All other references are always dereferenced regardless the value of `ex`.\n\nExamples\n--------\n\n```javascript\n$('http://example.com', schema, true);\n$(schema, refs, true);\n$(schema, true);\n```\n\nUtilities\n---------\n\nAside the basics of `$`, this function will include:\n\n- **$.refs** (object)\n\n  An registry of dereferenced schemas.\n\n- **$.util** (object)\n\n  Exposes the internal helpers used by `deref`.\n\n  - `isURL(path)`\n  - `parseURI(href)`\n  - `resolveURL(base, href)`\n  - `getDocumentURI(path)`\n  - `findByRef(uri, refs)`\n  - `resolveSchema(schema, refs)`\n  - `normalizeSchema(fakeroot, schema)`\n\nAny `refs` passed MUST be an object of normalized schemas.\n\nNote that calling `$(schema)` will not read/download any local/remote files.\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/json-schema-faker/deref/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/json-schema-faker/deref.git"
  },
  "scripts": {
    "cover": "istanbul cover --root lib --x '**/spec/**' -- jasmine-node --coffee spec",
    "cover:up": "codecov --file=coverage/lcov.info --disable=gcov -e TRAVIS_NODE_VERSION",
    "dev": "jasmine-node spec --coffee --verbose --autoTest --watchFolders lib",
    "dev:lint": "eslint lib",
    "dev:spec": "jasmine-node spec --coffee --noStackTrace --captureExceptions",
    "test": "npm run dev:lint && npm run dev:spec"
  },
  "version": "0.6.4"
}
